@model DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <h2 style="color: white" align="center">Dashboard</h2>
    <h4 class="timestamp" style="color: white" align="center">Last Update: @Model.LastUpdate </h4>
</div>

@for (int i = 0; i < Model.Sensors.Count(); i++)
{
    <div class="col-lg-4">
        <div class="card">
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Name: @Model.Sensors[i].Name</li>
                <li class="list-group-item">Sensor range: @Model.Sensors[i].MinValue - @Model.Sensors[i].MaxValue</li>
                @if (Model.Sensors[i].GraphicalId != "3")
                {
                    <li class="list-group-item">User acceptable range: @Model.Sensors[i].UserMinValue - @Model.Sensors[i].UserMaxValue</li>
                }
                else
                {
                    <li class="list-group-item">
                        User acceptable position:
                        @if (Model.Sensors[i].UserMinValue == 0)
                        {
                            @:Closed (Occupied)
                        }
                        else
                        {
                            @:Open (Not Occupied)
                        }
                    </li>
                }
                <li class="list-group-item">
                    <div class="text-center center-block">
                        <div class="@Model.Sensors[i].Id" style="height: 100px;">
                            <canvas id="@Model.Sensors[i].Id" style="height: 100px;"></canvas>
                        </div>
                    </div>
                </li>
                @if (Model.Sensors[i].GraphicalId != "3")
                {
                    <li value" class="list-group-item"><div id="@i">Current value: @Model.Sensors[i].Value</div></li>
                }
                else
                {
                    if (Model.Sensors[i].Value == 0)
                    {
                        <li class="list-group-item"><div id="@i">Current value: Closed (Occupied)</div></li>
                    }
                    else
                    {
                        <li class="list-group-item"><div id="@i">Current value: Open (Not Occupied)</div></li>
                    }
                }
            </ul>
        </div>
    </div>
}
@section Scripts {
    <script src="~/js/Gauge.js"></script>
    <script src="~/js/Progressbar.js"></script>
    <script>
        var json = @Html.Raw(Json.Serialize(Model.Sensors));
        var sensorsForUpdate = '';
        var opts, target, gauge;
        var gauges = [];
        //var counter = 0;

        $.each(json, function (index, value) {
            console.log(value.graphicalId);
            if (value.graphicalId === '1') {
                sensorsForUpdate += ',' + value.id;
                opts = {
                    angle: 0.07,
                    lineWidth: 0.2,
                    radiusScale: 1,
                    pointer: {
                        length: 0.6,
                        strokeWidth: 0.035,
                        color: '#000000'
                    },
                    limitMax: false, //Dynamicly change MAX, according to data, will edit gauge view
                    limitMin: false, //Dynamicly change MIN, according to data, will edit gauge view
                    colorStart: '#6FADCF',
                    colorStop: '#8FC0DA',
                    strokeColor: '#E0E0E0',
                    generateGradient: true,
                    highDpiSupport: true,
                    staticZones: [
                        { strokeStyle: "#3EF456", min: value.userMinValue, max: value.userMaxValue }, // Green
                        { strokeStyle: "#FD0909", min: value.minValue, max: value.userMinValue }, // Red
                        { strokeStyle: "#FD0909", min: value.userMaxValue, max: value.maxValue } // Red
                    ],
                    staticLabels: {
                        font: "10px sans-serif",
                        labels: [value.minValue, value.userMinValue, value.userMaxValue, value.maxValue],  // Print labels at these values
                        color: "#000000",
                        fractionDigits: 0
                    },
                };

                target = document.getElementById('' + value.id);
                gauge = new Gauge(target).setOptions(opts);

                gauge.maxValue = value.maxValue;
                gauge.setMinValue(value.minValue);
                gauge.animationSpeed = 32;
                gauge.set(value.value);

                gauges[value.id] = gauge;
            } else if (value.graphicalId === '2') {
                sensorsForUpdate += ',' + value.id;

                $('.' + value.id).empty();
                $('.' + value.id).addClass("paddingGauge");
                $('.' + value.id).LineProgressbar({
                    percentage: ((value.value - value.minValue) / (value.maxValue - value.minValue)) * 100
                });
            } else if (value.graphicalId === '3') {
                sensorsForUpdate += ',' + value.id;

                $('.' + value.id).addClass("paddingGauge");

                if (value.value === value.userMaxValue) {

                    $('.' + value.id).empty();
                    $('.' + value.id).append("<status-indicator positive pulse></status-indicator>");

                } else {
                    $('.' + value.id).empty();
                    $('.' + value.id).append("<status-indicator negative pulse></status-indicator>");
                }
            }
        });

        $(document).ready(function () {
            setInterval(updateSensors, 3000)
        });

        function updateSensors() {
            $.get({
                url: '/Users/Sensor/UpdateDashboard?ids=' + sensorsForUpdate,
                method: "get",
            }).done(function (data) {
                var userSensors = jQuery.parseJSON(JSON.stringify(data));
                console.log(json);
                console.log(userSensors);

                $.each(json, function (index, value) {
                    console.log(index);
                    if (value.value != userSensors[index].value) {

                        value.value = userSensors[index].value;

                        if (value.graphicalId === '1') {
                            gauges[value.id].set(value.value);
                            $('#' + index).text('Current value: ' + value.value);
                        } else if (value.graphicalId === '2') {

                            $('.' + value.id).LineProgressbar({
                                percentage: ((value.value - value.minValue) / (value.maxValue - value.minValue)) * 100
                            })
                            $('#' + index).text('Current value: ' + value.value);
                        } else if (value.graphicalId === '3') {

                            $('.' + value.id).empty();

                            if (value.value === 0) {
                                console.log('entered value===0');

                                $('#' + index).text('Current value: Closed (Occupied)');
                            } else  if (value.value === 1) {
                                console.log('entered value===1');

                                $('#' + index).text('Current value: Open (Not Occupied)');
                            }

                            if (value.userMaxValue === 0) {

                                if (value.value === 0) {
                                    $('.' + value.id).append("<status-indicator positive pulse></status-indicator>");
                                } else {
                                    $('.' + value.id).append("<status-indicator negative pulse></status-indicator>");
                                }
                            } else if (value.userMaxValue === 1) {

                                if (value.value === 1) {
                                    $('.' + value.id).append("<status-indicator positive pulse></status-indicator>");
                                } else {
                                    $('.' + value.id).append("<status-indicator negative pulse></status-indicator>");
                                }
                            }
                        }
                    }
                });
            });
        }
    </script>
}
