@model RegisterSensorViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<br />
<br />
<br />
<div class="text-danger" style="color: white">@TempData["InvalidModel"]</div>
<div class="row">
    <div class="col-lg-6">
        <form asp-controller="Sensor" asp-action="Register" id="register-form" method="post">

            <input asp-for="UserID" type="hidden" value="@ViewBag.userId">

            <label asp-for="Name" style="color: white">Name:</label><br />
            <input name="name" asp-for="Name" class="form-control" /><br />
            <span asp-validation-for="Name"></span>

            <label asp-for="Description" style="color: white">Description:</label><br />
            <textarea name="description" asp-for="Description" class="form-control"></textarea><br />
            <span asp-validation-for="Description"></span>

            <div class="row">
                <div class="col-lg-6">
                    <label asp-for="SensorTypeId" style="color: white">Sensor types:</label><br />
                    <select name="SensorTypeId" id="SensorTypeId" asp-for="SensorTypeId" asp-items="Model.SensorTypes" class="form-control">
                        <option value="">Select sensor type</option>
                    </select>
                </div>

                <div class="col-lg-6">
                    <label asp-for="SensorId" style="color: white">Sensors:</label><br />
                    <select name="SensorId" id="SensorId" asp-for="SensorId" asp-items="Model.SensorsSelect" class="form-control">
                        <option value="">Select sensor</option>
                    </select>
                </div>
            </div>


            <br />

            <label asp-for="UpdateInterval" style="color: white">Update Interval:</label><br />
            <input name="updateInterval" asp-for="UpdateInterval" class="form-control" /><br />
            <span asp-validation-for="UpdateInterval" class="text-danger"></span>

            <div class="row">
                <div class="form-group col-md-6">
                    <label asp-for="Latitude" style="color: white">Latitude</label>
                    <input name="Latitude" asp-for="Latitude" type="text" value="" class="form-control" id="latitude" placeholder="Read only field" readonly>
                    <span asp-validation-for="Latitude" class="text-danger"></span>
                </div>

                <div class="form-group col-md-6">
                    <label asp-for="Longitude" style="color: white">Longtitude</label>
                    <input asp-for="Longitude" type="text" value="" class="form-control" id="longtitude" placeholder="Read only field" readonly>
                    <span asp-validation-for="Longitude" class="text-danger"></span>
                </div>
            </div>

            <div class="row" style="color: white" id="validation" name="validation"></div>
            <br />
            <div class="row">
                <div class="col-lg-6 form-group">
                    <label class="" id="checkbox">
                        <input asp-for="IsPublic" type="checkbox" autocomplete="off">
                        <label asp-for="IsPublic" style="color: white">Public</label>
                        <span class="checkmark"></span>
                    </label>
                </div>

                <div class="col-lg-6 form-group">
                    <label class="" id="checkbox">
                        <input asp-for="IsRequiredNotification" type="checkbox" autocomplete="off">
                        <label asp-for="IsRequiredNotification" style="color: white">Notifications</label>
                        <span class="checkmark"></span>
                    </label>
                </div>
            </div>
            <br />
            <button type="submit" class="btn btn-primary center-block">Register</button>
        </form>
    </div>

    <div class="col-lg-6">
        <br />
        <div>
            <div id="map"></div>
            <script>
                var map, marker;
                function initMap() {
                    map = new google.maps.Map(document.getElementById('map'), {
                        center: { lat: 42.694, lng: 23.312 },
                        zoom: 4
                    });
                    google.maps.event.addListener(map, 'click', function (event) {
                        if (marker) {
                            marker.setPosition(event.latLng)
                            $('#latitude').attr('value', marker.position.lat)
                            $('#longtitude').attr('value', marker.position.lng)
                        }
                        else {
                            marker = new google.maps.Marker({
                                position: event.latLng,
                                map: map,
                            });
                            marker.setAnimation(google.maps.Animation.BOUNCE);
                            $('#latitude').attr('value', marker.position.lat)
                            $('#longtitude').attr('value', marker.position.lng)
                        }
                    });
                }
            </script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCDteKY2bbicMlrP2DHSJmSciuIP-E_D6k&callback=initMap"
                    async defer></script>
        </div>
    </div>
</div>


<style>
    #map {
        height: 500px;
        width: 500px;
    }

    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>
@section Scripts {
    <script>
        jQuery.validator.setDefaults({
            errorClass: 'error'
        });

        var validator = $("#register-form").validate({
            rules: {
                name: "required",
                description: "required",
                updateInterval: {
                    required: true,
                    range: [1, 99999]
                },
                minValue: {
                    required: true,
                    range: [1, 10]
                },
                maxValue: {
                    required: true,
                    range: [1, 10]
                },
                SensorId: "required",
                Latitude: "required"
            },
            messages: {
                name: "Please enter a name for your sensor.",
                description: "A description for your sensor is required.",
                updateInterval: {
                    required: "A interval for sensor updates is required",
                    range: "Update interval cannot be smaller lower than 30 seconds."
                },
                minValue: {
                    required: "Please first select a sensor.",
                    range: "Please first select a sensor."
                },
                maxValue: {
                    required: "Please first select a sensor.",
                    range: "Please first select a sensor."
                },
                SensorId: "Please select a sensor.",
                Latitude: "Latitude and Longtitude are required (select them using our map)."
            }
        });

        function updateValidations(min, max, interval) {
            console.log(1)
            var validator = $("#register-form").validate({
                rules: {
                    name: "required",
                    description: "required",
                    updateInterval: {
                        required: true,
                        range: [interval, 99999]
                    },
                    minValue: {
                        required: true,
                        range: [min, max]
                    },
                    maxValue: {
                        required: true,
                        range: [min, max]
                    },
                    SensorId: "required",
                    Latitude: "required"
                },
                messages: {
                    name: "Please enter a name for your sensor.",
                    description: "A description for your sensor is required.",
                    updateInterval: {
                        required: "A interval for sensor updates is required",
                        range: function () { return "Update interval cannot be smaller than " + interval + " seconds." }
                    },
                    minValue: {
                        required: "A minimum value is required.",
                        range: function () { return "Acceptable range values cannot be outside " + min + "-" + max + "." }
                    },
                    maxValue: {
                        required: "A maximum value is required.",
                        range: function () { return "Acceptable range values cannot be outside " + min + "-" + max + "." }
                    },
                    SensorId: "Please select a sensor.",
                    Latitude: "Latitude and Longtitude are required (select them using our map)."
                }
            });
        }
    </script>
    <script src="~/js/SensorRegisterSelection.js"></script>
    <script src="~/js/SensorRegisterValidation.js"></script>
}

